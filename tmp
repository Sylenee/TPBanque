isen.group1.api.assurance.aspect.LogAspect.java
isen.group1.api.assurance.controller.ClientController.java
- List<ContratDTO> getContratsFromClient(@PathVariable("client_id") Integer idClient)
- ContratDTO getOneContratsFromClient(@PathVariable("client_id") Integer idClient, @PathVariable("contrat_id") Integer idContrat)
isen.group1.api.assurance.controller.ConseillerController.java
- ResponseEntity<List<ClientDTO>> getListClient(@PathVariable("idConseiller")Integer idConseiller)
- ResponseEntity<Object> deleteClient(@PathVariable("idConseiller")Integer idConseiller, @PathVariable("idClient")Integer idClient)
- ResponseEntity<ClientDTO> updateClient(@PathVariable("idConseiller")Integer idConseiller, @RequestBody ClientDTO clientModif,@PathVariable("idClient") Integer idClient)
- ResponseEntity<ContratDTO> updateContrat(@RequestBody ContratDTO contrat, @PathVariable("idcontrat") Integer idcontrat,@PathVariable("idconseiller") Integer idConseiller)
- ResponseEntity<ContratDTO> addContrat(@RequestBody ContratDTO contrat, @PathVariable("idclient") Integer idclient,@PathVariable("idconseiller") Integer idConseiller)
isen.group1.api.assurance.data.entity.ClientEntity.java
-@Table(name = "client")
-@Entity
-@NoArgsConstructor
-@Getter
-@Setter
-@Column(name = "id")
-@Id @GeneratedValue(strategy=GenerationType.IDENTITY)
-private int id
-@Column(name = "nom")
-private String nom
-@Column(name = "prenom")
-private String prenom
-@Column(name = "adresse")
-private String adresse
-@Column(name = "id_conseiller")
-private int idConseiller = -1
isen.group1.api.assurance.data.entity.ConseillerEntity.java
-@Table(name = "conseiller")
-@Getter
-@Entity
-@Setter
-@NoArgsConstructor
-@ToString
-@Id
-@Column(name = "id")
-private int idConseiller = -1
-@Column(name = "nom")
-private String nom
-@Column(name = "prenom")
-private String prenom
-@Column(name = "id_client")
-private String idClient
isen.group1.api.assurance.data.entity.ContratEntity.java
-@Entity
-@Getter
-@Setter
-@Table(name = "contrat")
-@Id @GeneratedValue(strategy=GenerationType.IDENTITY)
-@Column(name = "id")
-private int id
-@Column(name = "mensualite")
-private float mensualite
-@Column(name = "type")
-private String type
-@Column(name = "dateDebut")
-private Timestamp dateDebut
-@Column(name = "dateFin")
-private Timestamp dateFin
-@Column(name ="id_client")
-private int clientId
isen.group1.api.assurance.data.repository.jdbc.impl.ClientRepositoryImpl.java
-List<ContratDTO> getAllContratsFromClientID(int id)
-ContratDTO getOneContratFromClientID(int idClient, int idContrat)
isen.group1.api.assurance.data.repository.jdbc.ClientRepositoryJDBC.java(Interface)
-List<ContratDTO> getAllContratsFromClientID(int id)
-ContratDTO getOneContratFromClientID(int idClient, int idContrat)
isen.group1.api.assurance.data.repository.jpa.ClientRepositoryJPA.java(Interface)
-List<ClientDTO> findByIdConseiller(int idConseiller)
isen.group1.api.assurance.data.repository.jpa.ConseillerRepositoryJPA.java(Interface)
-List<ClientDTO> findByIdConseiller(int idConseiller)
isen.group1.api.assurance.data.repository.jpa.ContratRepositoryJPA.java(Interface)
isen.group1.api.assurance.model.dto.ClientDTO.java
-@Getter
-@Setter
-@NoArgsConstructor
-@ToString
isen.group1.api.assurance.model.dto.ConseillerDTO.java
-@Getter
-@Setter
-@NoArgsConstructor
-@ToString
isen.group1.api.assurance.model.dto.ContratDTO.java
-@Getter
-@Setter
-@NoArgsConstructor
-@ToString
isen.group1.api.assurance.service.imp.ClientServiceImpl.java
-List<ContratDTO> getAllContratsFromClientID(int id)
-ContratDTO getOneContratFromClientID(int idClient, int idContrat)
isen.group1.api.assurance.service.imp.ConseillerServiceImpl.java
-List<ClientDTO> getListClient(int idConseiller)
-List<ClientDTO> getListClientFromConseiller(int idConseiller)
-void deleteClient(int idConseiller, int idClient)
-void updateClient(int idConseiller, ClientDTO clientModif, int idClient)
-ContratDTO updateContrat(Integer contratId, ContratDTO contrat, Integer idConseiller)
-ContratDTO ajouterContrat(ContratDTO contrat, int idConseiller)
-ClientDTO ajouterClient(ClientDTO clientDTO)
isen.group1.api.assurance.service.ClientService.java(Interface)
-List<ContratDTO> getAllContratsFromClientID(int id)
-ContratDTO getOneContratFromClientID(int idClient, int idContrat)
isen.group1.api.assurance.service.ConseillerService.java(Interface)
-List<ClientDTO> getListClient(int idConseiller)
-void deleteClient(int idConseiller, int idClient)
-void updateClient(int idConseiller, ClientDTO clientModif, int idClient)
-List<ClientDTO> getListClientFromConseiller(int idConseiller)
-ContratDTO ajouterContrat(ContratDTO contrat, int idConseiller)
-ContratDTO updateContrat(Integer idcontrat, ContratDTO contrat, Integer idConseiller)
-ClientDTO ajouterClient(ClientDTO clientDTO)
isen.group1.api.assurance.Application.java
-void main(String[] args) {SpringApplication.run(Application.class, args)}



package isen.group1.api.assurance.aspect;

import java.util.Arrays;
import java.util.stream.Collectors;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.aspectj.lang.reflect.MethodSignature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcDaoSupport;
import org.springframework.jdbc.core.support.JdbcDaoSupport;
import org.springframework.jdbc.core.Sql;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class LogAspect {

    private final Logger log = LoggerFactory.getLogger(this.getClass());

    // Pointcut pour les méthodes de type GET dans les contrôleurs
    @Pointcut("execution(* isen.group1.api.assurance.controller.*Controller.get*(..))")
    private void getMethod() {}

    // Pointcut pour les méthodes de type POST dans les contrôleurs
    @Pointcut("execution(* isen.group1.api.assurance.controller.*Controller.post*(..))")
    private void postMethod() {}

    // Pointcut pour les méthodes de type PUT dans les contrôleurs
    @Pointcut("execution(* isen.group1.api.assurance.controller.*Controller.put*(..))")
    private void putMethod() {}

    // Pointcut pour les méthodes de type DELETE dans les contrôleurs
    @Pointcut("execution(* isen.group1.api.assurance.controller.*Controller.delete*(..))")
    private void deleteMethod() {}

    // Pointcut pour les méthodes de type JDBC
    @Pointcut("execution(* isen.group1.api.assurance.data.repository.jdbc.*.*(..))")
    private void jdbcMethod() {}

    // Pointcut pour les méthodes de type JPA
    @Pointcut("execution(* isen.group1.api.assurance.data.repository.jpa.*.*(..))")
    private void jpaMethod() {}

    @Before("getMethod() || postMethod() || putMethod() || deleteMethod()")
    public void logBeforeRestCall(JoinPoint joinPoint) {
        log.info("REST call: " + joinPoint.getSignature().getName() + " with args "
                + Arrays.toString(joinPoint.getArgs()));
    }

    @AfterReturning(pointcut = "getMethod() || postMethod() || putMethod() || deleteMethod()",
            returning = "result")
    public void logAfterRestCall(JoinPoint joinPoint, Object result) {
        log.info("REST call: " + joinPoint.getSignature().getName() + " returns " + result);
    }

    @Before("jdbcMethod()")
    public void logBeforeJdbcCall(JoinPoint joinPoint) {
        JdbcTemplate jdbcTemplate = getJdbcTemplateFromJoinPoint(joinPoint);
        String sql = getSqlFromJoinPoint(joinPoint);
        Object[] args = getArgumentsFromJoinPoint(joinPoint);
        String argsString = Arrays.stream(args)
                .map(Object::toString)
                .collect(Collectors.joining(", "));
        log.info("JDBC call: " + sql + " with args " + argsString);
    }

    @AfterReturning(pointcut = "jdbcMethod()", returning = "result")
    public void logAfterJdbcCall(JoinPoint joinPoint, Object result) {
        JdbcTemplate jdbcTemplate = getJdbcTemplateFromJoinPoint(joinPoint);
        String sql = getSqlFromJoinPoint(joinPoint);
        Object[] args = getArgumentsFromJoinPoint(joinPoint);
        String argsString = Arrays.stream(args)
                .map(Object::toString)
                .collect(Collectors.joining(", "));
        log.info("JDBC call: " + sql + " with args " + argsString + " returns " + result);
    }

    @Before("jpaMethod()")
    public void logBeforeJpaCall(JoinPoint joinPoint) {
        String methodName = joinPoint.getSignature().getName();
        String className = joinPoint.getTarget().getClass().getSimpleName();
        Object[] args = joinPoint.getArgs();
        String argsString = Arrays.toString(args);
        log.info("JPA call: " + methodName + " with args " + argsString + " in " + className);
    }

    @AfterReturning(pointcut = "jpaMethod()",
            returning = "result")
    public void logAfterJpaCall(JoinPoint joinPoint, Object result) {
        String methodName = joinPoint.getSignature().getName();
        String className = joinPoint.getTarget().getClass().getSimpleName();
        log.info("JPA call: " + methodName + " in " + className + " returns " + result);
    }

    private JdbcTemplate getJdbcTemplateFromJoinPoint(JoinPoint joinPoint) {
        Object target = joinPoint.getTarget();
        if (target instanceof JdbcDaoSupport) {
            return ((JdbcDaoSupport) target).getJdbcTemplate();
        } else if (target instanceof NamedParameterJdbcDaoSupport) {
            return ((NamedParameterJdbcDaoSupport) target).getJdbcTemplate();
        } else {
            throw new IllegalStateException("Unexpected target class: " + target.getClass().getName());
        }
    }

    private String getSqlFromJoinPoint(JoinPoint joinPoint) {
        MethodSignature signature = (MethodSignature) joinPoint.getSignature();
        Sql sqlAnnotation = signature.getMethod().getAnnotation(Sql.class);
        if (sqlAnnotation != null) {
            return sqlAnnotation.value();
        } else {
            throw new IllegalStateException("Missing @Sql annotation on method " + signature.getName());
        }
    }

    private Object[] getArgumentsFromJoinPoint(JoinPoint joinPoint) {
        return joinPoint.getArgs();
    }

}